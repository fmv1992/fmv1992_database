"""Create the `IdToBlob` table.

Revision ID: 070c1d5674d8
Revises: 
Create Date: 2022-08-20 14:14:08.108989

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = "070c1d5674d8"
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "id_to_binary",
        sa.Column(
            "id",
            sa.String(length=32),
            nullable=False,
            comment="Unique ID of every primary blob.\n\nI decided to use `xxHash` for its collision resistance and speed.\n\nHash example: `32` (`fmv1992_backup_system:7ec185b:pyproject.toml:1`).\n\n# Related links:\n\n1.  <https://github.com/Cyan4973/xxHash>.",
        ),
        sa.Column("is_compressed", sa.Boolean(), nullable=False),
        sa.Column(
            "comment",
            sa.String(),
            server_default=sa.text("''"),
            nullable=False,
            comment="Comment associated with the binary.",
        ),
        sa.Column("binary", sa.LargeBinary(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        schema="fmv1992_backup_system",
    )
    op.create_table(
        "access_record",
        sa.Column(
            "id",
            sa.String(length=32),
            nullable=False,
            comment="Unique ID of every primary blob.\n\nI decided to use `xxHash` for its collision resistance and speed.\n\nHash example: `32` (`fmv1992_backup_system:7ec185b:pyproject.toml:1`).\n\n# Related links:\n\n1.  <https://github.com/Cyan4973/xxHash>.",
        ),
        sa.Column(
            "timestamp",
            sa.DateTime(timezone=datetime.timezone.utc),
            nullable=False,
            comment="Timestamp associated with the backed up file/binary blob.",
        ),
        sa.ForeignKeyConstraint(
            ["id"],
            ["fmv1992_backup_system.id_to_binary.id"],
        ),
        sa.PrimaryKeyConstraint("id", "timestamp"),
        schema="fmv1992_backup_system",
    )
    op.create_table(
        "backups",
        sa.Column(
            "id",
            sa.String(length=32),
            nullable=False,
            comment="Unique ID of every primary blob.\n\nI decided to use `xxHash` for its collision resistance and speed.\n\nHash example: `32` (`fmv1992_backup_system:7ec185b:pyproject.toml:1`).\n\n# Related links:\n\n1.  <https://github.com/Cyan4973/xxHash>.",
        ),
        sa.Column(
            "timestamp",
            sa.DateTime(timezone=datetime.timezone.utc),
            nullable=False,
            comment="Timestamp associated with the backed up file/binary blob.",
        ),
        sa.Column("path", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["id"],
            ["fmv1992_backup_system.id_to_binary.id"],
        ),
        sa.PrimaryKeyConstraint("id", "timestamp", "path"),
        schema="fmv1992_backup_system",
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("backups", schema="fmv1992_backup_system")
    op.drop_table("access_record", schema="fmv1992_backup_system")
    op.drop_table("id_to_binary", schema="fmv1992_backup_system")
    # ### end Alembic commands ###
